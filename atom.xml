<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kuah&#39;s Den</title>
  
  <subtitle>(๑•̀ㅂ•́)و✧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://http://kuah.top/"/>
  <updated>2018-05-08T03:16:00.522Z</updated>
  <id>https://http://kuah.top/</id>
  
  <author>
    <name>Kuah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DSBridge源码阅读</title>
    <link href="https://http://kuah.top/2018/05/08/DSBridge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://http://kuah.top/2018/05/08/DSBridge源码阅读/</id>
    <published>2018-05-08T02:55:26.000Z</published>
    <updated>2018-05-08T03:16:00.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言: 公司最近做项目，用到H5，的确，在RN、原生、H5混合，其实很多公司都已经慢慢使用H5来开发了，因为H5可以3端使用，这个的确是不能代替的属性，组内有人推荐用DSBridge，因此，就此简单地阅读了下源码，仅作为小记，以免健忘症发作…</p></blockquote><a id="more"></a> <p>[TOC]</p><h2 id="原生代码"><a href="#原生代码" class="headerlink" title="原生代码"></a>原生代码</h2><p>原生代码分成：</p><ul><li><p>DWKWebView                            <code>处理web的通讯与交互（核心）</code></p></li><li><p>JSBUtil                                         <code>格式封装、解析</code></p></li><li><p>InternalApis                               <code>默认注册的api，可以理解为消息处理</code></p></li><li><p>DSCallInfo                                  <code>通讯model</code></p></li></ul><ul><li>JSBWebEventDelegate             <code>作者实际上并没有用上</code></li></ul><h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bridge = &#123;</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">this</span>,<span class="comment">// for typescript</span></span><br><span class="line">    call: <span class="function"><span class="keyword">function</span> (<span class="params">method, args, cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> args == <span class="string">'function'</span>) &#123;</span><br><span class="line">            cb = args;</span><br><span class="line">            args = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arg=&#123;<span class="attr">data</span>:args===<span class="literal">undefined</span>?<span class="literal">null</span>:args&#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> cb == <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cbName = <span class="string">'dscb'</span> + <span class="built_in">window</span>.dscb++;</span><br><span class="line">            <span class="built_in">window</span>[cbName] = cb;</span><br><span class="line">            arg[<span class="string">'_dscbstub'</span>] = cbName;</span><br><span class="line">        &#125;</span><br><span class="line">        arg = <span class="built_in">JSON</span>.stringify(arg)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if in webview that dsBridge provided, call!</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>._dsbridge)&#123;</span><br><span class="line">           ret=  _dsbridge.call(method, arg)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>._dswk||navigator.userAgent.indexOf(<span class="string">"_dsbridge"</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">           ret = prompt(<span class="string">"_dsbridge="</span> + method, arg);<span class="comment">//markJS-1: 此处可以调起</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>  <span class="built_in">JSON</span>.parse(ret||<span class="string">'&#123;&#125;'</span>).data</span><br><span class="line">    &#125;,</span><br><span class="line">    register: <span class="function"><span class="keyword">function</span> (<span class="params">name, fun, asyn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> q = asyn ? <span class="built_in">window</span>._dsaf : <span class="built_in">window</span>._dsf</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>._dsInit) &#123;</span><br><span class="line">            <span class="built_in">window</span>._dsInit = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//notify native that js apis register successfully on next event loop</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                bridge.call(<span class="string">"_dsb.dsinit"</span>);</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fun == <span class="string">"object"</span>) &#123;</span><br><span class="line">            q._obs[name] = fun;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            q[name] = fun</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    registerAsyn: <span class="function"><span class="keyword">function</span> (<span class="params">name, fun</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.register(name, fun, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    hasNativeMethod: <span class="function"><span class="keyword">function</span> (<span class="params">name, type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.call(<span class="string">"_dsb.hasNativeMethod"</span>, &#123;<span class="attr">name</span>: name, <span class="attr">type</span>:type||<span class="string">"all"</span>&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    disableJavascriptDialogBlock: <span class="function"><span class="keyword">function</span> (<span class="params">disable</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.call(<span class="string">"_dsb.disableJavascriptDialogBlock"</span>, &#123;</span><br><span class="line">            disable: disable !== <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>._dsf) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ob = &#123;</span><br><span class="line">        _dsf: &#123;</span><br><span class="line">            _obs: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        _dsaf: &#123;</span><br><span class="line">            _obs: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dscb: <span class="number">0</span>,</span><br><span class="line">        dsBridge: bridge,</span><br><span class="line">        close: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            bridge.call(<span class="string">"_dsb.closePage"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        _handleMessageFromNative: <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arg = <span class="built_in">JSON</span>.parse(info.data);</span><br><span class="line">            <span class="keyword">var</span> ret = &#123;</span><br><span class="line">                id: info.callbackId,</span><br><span class="line">                complete: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> f = <span class="keyword">this</span>._dsf[info.method];</span><br><span class="line">            <span class="keyword">var</span> af = <span class="keyword">this</span>._dsaf[info.method]</span><br><span class="line">            <span class="keyword">var</span> callSyn = <span class="function"><span class="keyword">function</span> (<span class="params">f, ob</span>) </span>&#123;</span><br><span class="line">                ret.data = f.apply(ob, arg)</span><br><span class="line">                bridge.call(<span class="string">"_dsb.returnValue"</span>, ret)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> callAsyn = <span class="function"><span class="keyword">function</span> (<span class="params">f, ob</span>) </span>&#123;</span><br><span class="line">                arg.push(<span class="function"><span class="keyword">function</span> (<span class="params">data, complete</span>) </span>&#123;</span><br><span class="line">                    ret.data = data;</span><br><span class="line">                    ret.complete = complete!==<span class="literal">false</span>;</span><br><span class="line">                    bridge.call(<span class="string">"_dsb.returnValue"</span>, ret)</span><br><span class="line">                &#125;)</span><br><span class="line">                f.apply(ob, arg)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f) &#123;</span><br><span class="line">                callSyn(f, <span class="keyword">this</span>._dsf);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (af) &#123;</span><br><span class="line">                callAsyn(af, <span class="keyword">this</span>._dsaf);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//with namespace</span></span><br><span class="line">                <span class="keyword">var</span> name = info.method.split(<span class="string">'.'</span>);</span><br><span class="line">                <span class="keyword">if</span> (name.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">var</span> method=name.pop();</span><br><span class="line">                <span class="keyword">var</span> namespace=name.join(<span class="string">'.'</span>)</span><br><span class="line">                <span class="keyword">var</span> obs = <span class="keyword">this</span>._dsf._obs;</span><br><span class="line">                <span class="keyword">var</span> ob = obs[namespace] || &#123;&#125;;</span><br><span class="line">                <span class="keyword">var</span> m = ob[method];</span><br><span class="line">                <span class="keyword">if</span> (m &amp;&amp; <span class="keyword">typeof</span> m == <span class="string">"function"</span>) &#123;</span><br><span class="line">                    callSyn(m, ob);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                obs = <span class="keyword">this</span>._dsaf._obs;</span><br><span class="line">                ob = obs[namespace] || &#123;&#125;;</span><br><span class="line">                m = ob[method];</span><br><span class="line">                <span class="keyword">if</span> (m &amp;&amp; <span class="keyword">typeof</span> m == <span class="string">"function"</span>) &#123;</span><br><span class="line">                    callAsyn(m, ob);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> ob) &#123;</span><br><span class="line">        <span class="built_in">window</span>[attr] = ob[attr]</span><br><span class="line">    &#125;</span><br><span class="line">    bridge.register(<span class="string">"_hasJavascriptMethod"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">method, tag</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> name = method.split(<span class="string">'.'</span>)</span><br><span class="line">         <span class="keyword">if</span>(name.length&lt;<span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> !!(_dsf[name]||_dsaf[name])</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// with namespace</span></span><br><span class="line">           <span class="keyword">var</span> method=name.pop()</span><br><span class="line">           <span class="keyword">var</span> namespace=name.join(<span class="string">'.'</span>)</span><br><span class="line">           <span class="keyword">var</span> ob=_dsf._obs[namespace]||_dsaf._obs[namespace]</span><br><span class="line">           <span class="keyword">return</span> ob&amp;&amp;!!ob[method]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = bridge;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="横向对比"><a href="#横向对比" class="headerlink" title="横向对比"></a>横向对比</h3><blockquote><p>和iOS的WebViewJavascriptBridge、Android的JSBridge横向对比，其中JSBridge为WebViewJavascriptBridge的安卓版，通讯基本相同，可以融合</p></blockquote><table><thead><tr><th style="text-align:left">对比点</th><th style="text-align:center">DSBridge</th><th style="text-align:center">WVJSB/JSBridge</th><th style="text-align:center">评价</th></tr></thead><tbody><tr><td style="text-align:left">bridge初始化时间</td><td style="text-align:center">无</td><td style="text-align:center">1~2seconds</td><td style="text-align:center">该点是W的最大缺点，也是DSBridge的挺大的优点</td></tr><tr><td style="text-align:left">双平台支持</td><td style="text-align:center">分别支持</td><td style="text-align:center">需要整合</td><td style="text-align:center">该点DSBridge也是做的很好的</td></tr><tr><td style="text-align:left">稳定</td><td style="text-align:center">✨✨✨</td><td style="text-align:center">✨✨✨✨✨</td><td style="text-align:center">没办法，后者经过了很多年的风雨</td></tr><tr><td style="text-align:left">框架架构/思路</td><td style="text-align:center">✨</td><td style="text-align:center">✨✨✨✨✨</td><td style="text-align:center">前者的代码实在是没法看，后者反而有很多技术博做🌰供新手学习</td></tr><tr><td style="text-align:left">易用性</td><td style="text-align:center">✨✨✨</td><td style="text-align:center">✨✨✨✨✨</td><td style="text-align:center">对于易用性，可能有主观成分，其实个人不喜DSBridge那种方法型写法</td></tr><tr><td style="text-align:left">解耦</td><td style="text-align:center">-</td><td style="text-align:center">✨✨✨✨✨</td><td style="text-align:center">框架最忌讳的就是<code>继承</code>！！！其实完全可以封装成分类</td></tr><tr><td style="text-align:left">iOS 双webView支持</td><td style="text-align:center">✨</td><td style="text-align:center">✨✨✨✨✨</td><td style="text-align:center">仅仅支持了wkwebview</td></tr><tr><td style="text-align:left">demo/文档 可读性</td><td style="text-align:center">✨</td><td style="text-align:center">✨✨✨</td><td style="text-align:center">-</td></tr></tbody></table><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><h3 id="Web-调用-Native"><a href="#Web-调用-Native" class="headerlink" title="Web 调用 Native"></a>Web 调用 Native</h3><p>与<code>WVJSB</code>不同的是，<code>DSBridge</code>基于<code>WKUIDelegate</code> 来通讯的：</p><p><code>js</code>代码请<code>Command+F</code> ( <code>//markJS-1:</code>)处</p><p>原生代码<code>Command+F</code> ( <code>//markNative-1:</code>) 处:</p><blockquote><p>DWKWebView.m line <strong>67</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt</span><br><span class="line">    defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame</span><br><span class="line">completionHandler:(void (^)(NSString * _Nullable result))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    NSString * prefix=@&quot;_dsbridge=&quot;;</span><br><span class="line">    if ([prompt hasPrefix:prefix])//markNative-1: 当带有该前缀，则认为属于本框架通讯</span><br><span class="line">    &#123;</span><br><span class="line">        NSString *method= [prompt substringFromIndex:[prefix length]];</span><br><span class="line">        NSString *result=nil;</span><br><span class="line">        if(isDebug)&#123;</span><br><span class="line">            result =[self call:method :defaultText ];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            @try &#123;</span><br><span class="line">                result =[self call:method :defaultText ];</span><br><span class="line">            &#125;@catch(NSException *exception)&#123;</span><br><span class="line">                NSLog(@&quot;%@&quot;, exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completionHandler(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Native-调用-Web"><a href="#Native-调用-Web" class="headerlink" title="Native 调用 Web"></a>Native 调用 Web</h3><blockquote><p>DWKWebView.m  line <strong>372</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString * json=[JSBUtil objToJsonString:@&#123;@&quot;method&quot;:info.method,@&quot;callbackId&quot;:info.id,</span><br><span class="line">                                             @&quot;data&quot;:[JSBUtil objToJsonString: info.args]&#125;];</span><br><span class="line">  [self evaluateJavaScript:[NSString stringWithFormat:@&quot;window._handleMessageFromNative(%@)&quot;,json]</span><br><span class="line">         completionHandler:nil];</span><br></pre></td></tr></table></figure><p>最后还是吐槽下他的架构吧：</p><ul><li>继承问题：真的，在没必要的情况下，继承是魔鬼！</li><li>api，写了代理，其实没有用上，其实可以从<code>InternalApis</code>可以看出他想通过注册很多api进去提供给web端调用，但事实上缺乏很好地管理</li><li>代码基本都在<code>DWKWebView</code>，可读性非常差</li><li>对于web端，作为开发，我肯定是想要判断两种情况，一种是在web打开，一种是在app打开，但这个代码块没有经过封装，对于一份代码在两个端跑，在前端页面开发的时候，每次都要写判断</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言: 公司最近做项目，用到H5，的确，在RN、原生、H5混合，其实很多公司都已经慢慢使用H5来开发了，因为H5可以3端使用，这个的确是不能代替的属性，组内有人推荐用DSBridge，因此，就此简单地阅读了下源码，仅作为小记，以免健忘症发作…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架源码阅读" scheme="https://http://kuah.top/categories/%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="源码小记" scheme="https://http://kuah.top/tags/%E6%BA%90%E7%A0%81%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Tesseract的iOS应用与测评</title>
    <link href="https://http://kuah.top/2018/01/04/Tesseract%E7%9A%84iOS%E5%BA%94%E7%94%A8%E4%B8%8E%E6%B5%8B%E8%AF%84/"/>
    <id>https://http://kuah.top/2018/01/04/Tesseract的iOS应用与测评/</id>
    <published>2018-01-04T01:29:06.000Z</published>
    <updated>2018-01-05T01:52:48.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">Tesseract</a> 是目前<code>github</code>上开源的OCR库最多<code>star</code>的一个库，他支持多平台。</p><blockquote><p>本文主要讲述测评与具体应用</p></blockquote><a id="more"></a><ul><li>测评结果</li></ul><blockquote><p>然经过测评，该库达不到我心里的祈愿，几乎只能识别比较大的黑体字，而且，就算是黑体字也会识别出错。说白了，就是训练集里面训练量太少，训练量越多（如中文汉字都几百种字体），识别越准确。如果要用到ocr，则可以</p><ul><li>购买训练集（格式这个要对上，而且收集麻烦）</li></ul><ul><li>用市面上付费的，百度<code>ocr</code>一大堆</li></ul></blockquote><p>点击下面阅读全文查看<code>使用方法</code></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform:ios, &apos;8.0&apos;</span><br><span class="line">target &apos;OCRTest&apos; do</span><br><span class="line">pod &apos;TesseractOCRiOS&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)tesseractRecogniceWithImage:(UIImage *)image compleate:(void(^)(NSString *text))compleate &#123;</span><br><span class="line">        G8Tesseract *tesseract = [[G8Tesseract alloc]initWithLanguage:@&quot;eng&quot;];</span><br><span class="line">        //模式</span><br><span class="line">        tesseract.engineMode = G8OCREngineModeTesseractOnly;</span><br><span class="line">        tesseract.maximumRecognitionTime = 10;</span><br><span class="line">        tesseract.pageSegmentationMode = G8PageSegmentationModeAuto;</span><br><span class="line">        tesseract.image = [image g8_blackAndWhite];</span><br><span class="line">    </span><br><span class="line">        [tesseract recognize];</span><br><span class="line">        compleate(tesseract.recognizedText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>其中<code>eng</code>为语种训练集,使用的训练集需要提前导入:<br>1.项目中新建文件夹：<code>tessdata</code>    （用于装载语种训练集）</p><p>2.将训练集放在该目录下</p><p>3.将文件夹以<code>folder</code>资源形式拖到项目中</p><blockquote><p><a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">训练集下载地址</a>    注意分支，不同分支存放的训练集对应不同的版本</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/2170902-4792854594fe9395.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>可使用多训练集，只需要用下划线分开即可，如：<code>eng_chi_sim</code>（其中<code>chi_sim</code>为中文简体）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tesseract&lt;/a&gt; 是目前&lt;code&gt;github&lt;/code&gt;上开源的OCR库最多&lt;code&gt;star&lt;/code&gt;的一个库，他支持多平台。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要讲述测评与具体应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="OCR" scheme="https://http://kuah.top/tags/OCR/"/>
    
      <category term="图像转文字" scheme="https://http://kuah.top/tags/%E5%9B%BE%E5%83%8F%E8%BD%AC%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>SCAdView</title>
    <link href="https://http://kuah.top/2017/12/20/SCAdView/"/>
    <id>https://http://kuah.top/2017/12/20/SCAdView/</id>
    <published>2017-12-20T13:00:25.000Z</published>
    <updated>2017-12-20T17:47:14.879Z</updated>
    
    <content type="html"><![CDATA[<p>这是一款拥有3D特效和支持高效定制的无限轮播图</p><a id="more"></a><h1 id="SCAdView"><a href="#SCAdView" class="headerlink" title="SCAdView"></a>SCAdView</h1><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p>If my code can help you even a little bit  ,  please click <code>star</code> . Thanks for your support , your star is my motivation.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a> is a carousel control which support the vertical or horizontal scrolling direction, finite / infinite loop carousel , with both 2D plane effect or 3D zoom effect.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Manual-installation"><a href="#Manual-installation" class="headerlink" title="Manual installation"></a>Manual installation</h3><p><a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">download</a> the code and unzip,then copy <code>SCAdView</code> directory into your project.</p><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>create or modify your podfile:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'SCAdView'</span></span><br></pre></td></tr></table></figure></p><p>and then <code>pod install</code></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>The <a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a> should be created by a <code>SCAdViewBuilder</code>,we can customize  <a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a>  by modifying a builder’s property.<br><strong>eg.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SCAdView *adView = [[SCAdView alloc] initWithBuilder:^(SCAdViewBuilder *builder) &#123;</span><br><span class="line">    builder.adArray = arrayFromService;</span><br><span class="line">    builder.viewFrame = (CGRect)&#123;0,100,self.view.bounds.size.width,self.view.bounds.size.width/2.f&#125;;</span><br><span class="line">    builder.adItemSize = (CGSize)&#123;self.view.bounds.size.width/2.5f,self.view.bounds.size.width/4.f&#125;;</span><br><span class="line">    builder.minimumLineSpacing = 0;</span><br><span class="line">    builder.secondaryItemMinAlpha = 0.6;</span><br><span class="line">    builder.threeDimensionalScale = 1.45;</span><br><span class="line">    builder.itemCellNibName = @&quot;SCAdDemoCollectionViewCell&quot;;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><h2 id="About-SCAdViewBuilder"><a href="#About-SCAdViewBuilder" class="headerlink" title="About SCAdViewBuilder"></a>About SCAdViewBuilder</h2><p>Please read SCAdViewBuilder’s  interface in <code>SCAdView.h</code> file.</p><h2 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h2><p><img src="http://upload-images.jianshu.io/upload_images/2170902-d1adf340ae56286b.gif?imageMogr2/auto-orient/strip" alt="Horizontal scrolling"></p><p><img src="http://upload-images.jianshu.io/upload_images/2170902-8971e30031675097.gif?imageMogr2/auto-orient/strip" alt="Vertical scrolling"></p><h1 id="SCAdView-1"><a href="#SCAdView-1" class="headerlink" title="SCAdView"></a>SCAdView</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果我的代码能帮助到你哪怕是一点点，请点一下star。谢谢你的支持，你的star是我的动力。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a> 是一个支持2D平面效果和3D缩放效果 , 可定制上下左右方向滚动 , 有限/无限循环 轮播的轮播控件</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p><a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">下载</a>源代码并解压，将目录下<code>SCAdView</code>文件夹添加到你的项目中</p><h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>创建或在你的 podfile中添加:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'SCAdView'</span></span><br></pre></td></tr></table></figure></p><p>然后到终端cd到目录下执行 <code>pod install</code></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在使用的时候，我们应该通过一个<code>SCAdViewBuilder</code>对象来构造出<a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a>，而我们可以通过在构造方法中修改buidler中的属性，来定制一个我们想要的 <a href="https://github.com/Chan4iOS/SCAdView" target="_blank" rel="noopener">SCAdView</a><br><strong>eg.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SCAdView *adView = [[SCAdView alloc] initWithBuilder:^(SCAdViewBuilder *builder) &#123;</span><br><span class="line">    builder.adArray = arrayFromService;</span><br><span class="line">    builder.viewFrame = (CGRect)&#123;0,100,self.view.bounds.size.width,self.view.bounds.size.width/2.f&#125;;</span><br><span class="line">    builder.adItemSize = (CGSize)&#123;self.view.bounds.size.width/2.5f,self.view.bounds.size.width/4.f&#125;;</span><br><span class="line">    builder.minimumLineSpacing = 0;</span><br><span class="line">    builder.secondaryItemMinAlpha = 0.6;</span><br><span class="line">    builder.threeDimensionalScale = 1.45;</span><br><span class="line">    builder.itemCellNibName = @&quot;SCAdDemoCollectionViewCell&quot;;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><h2 id="SCAdViewBuilder-的详解"><a href="#SCAdViewBuilder-的详解" class="headerlink" title="SCAdViewBuilder 的详解"></a>SCAdViewBuilder 的详解</h2><p>请到<code>SCAdView.h</code>文件查阅SCAdViewBuilder的 interface。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://upload-images.jianshu.io/upload_images/2170902-d1adf340ae56286b.gif?imageMogr2/auto-orient/strip" alt="水平滚动效果"></p><p><img src="http://upload-images.jianshu.io/upload_images/2170902-8971e30031675097.gif?imageMogr2/auto-orient/strip" alt="垂直滚动效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一款拥有3D特效和支持高效定制的无限轮播图&lt;/p&gt;
    
    </summary>
    
      <category term="开源控件" scheme="https://http://kuah.top/categories/%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Objective-C" scheme="https://http://kuah.top/categories/%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/Objective-C/"/>
    
    
      <category term="轮播图" scheme="https://http://kuah.top/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    
      <category term="广告图" scheme="https://http://kuah.top/tags/%E5%B9%BF%E5%91%8A%E5%9B%BE/"/>
    
  </entry>
  
</feed>
